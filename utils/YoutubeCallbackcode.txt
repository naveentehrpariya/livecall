// Subscribe to notifications
const susbcribe = await SubscribeYouTubeNotifications(userId, channel.id, streamKey );
console.log("notifications subscribed ",susbcribe);

const parseXML = (xml) => {
   return new Promise((resolve, reject) => {
     xml2js.parseString(xml, { explicitArray: false }, (err, result) => {
       if (err) {
         return reject(err);
       }
       resolve(result);
     });
   });
 };
 
//   youtube callback function
 const notificationCallback = async (req, res) => {
   if (req.method === 'GET' && req.query['hub.challenge']) {
     console.log('Verification request received');
     return res.status(200).send(req.query['hub.challenge']);
   }
 
   console.log("Callback called", req.params);
   const streamKey = req.params.streamKey;
   const subscription = await YoutubeNotification.findOne({ streamKey });
 
   if (!subscription) {
     return res.status(404).json({
       status: false,
       message: `No YouTube subscription found for this stream key ${streamKey}`
     });
   }
 
   const signature = req.headers['x-hub-signature'];
   console.log("Received signature:", signature);
 
   const bodyString = req.body;
   console.log("Request body:", bodyString);
 
   const computedSignature = 'sha1=' + crypto.createHmac('sha1', subscription.secret).update(bodyString).digest('hex');
   console.log("Computed signature:", computedSignature);
 
   if (signature !== computedSignature) {
     return res.status(400).json({
       status: false,
       message: 'Invalid signature',
     });
   }
 
   try {
     const parsedBody = await parseXML(bodyString);
     console.log("Parsed body:", parsedBody);
 
     if (parsedBody.feed.entry) {
       console.log("Video published or updated:");
       const videoId = parsedBody.feed.entry['yt:videoId'];
       const channelId = parsedBody.feed.entry['yt:channelId'];
       console.log(`Video ID: ${videoId}, Channel ID: ${channelId}`);
 
       // Check for liveBroadcastEvent to determine if the stream is starting or stopping
       if (parsedBody.feed.entry['yt:liveBroadcastEvent']) {
         const eventType = parsedBody.feed.entry['yt:liveBroadcastEvent']['$'].type;
         console.log(`Live Broadcast Event Type: ${eventType}`);
         if (eventType === 'complete') {
             console.log('Live stream has ended');
             stopffmpegstream(streamKey ,videoId);
             stopDbStream(streamKey ,videoId);
         } else if (eventType === 'live') {
           console.log('Live stream has started');
         }
       }
       
     } else if (parsedBody.feed['at:deleted-entry']) {
       console.log("Video deleted:", parsedBody.feed['at:deleted-entry']);
       stopffmpegstream(streamKey);
       stopDbStream(streamKey);
     } else {
       console.log("Unknown notification type received:", parsedBody);
     }
 
     res.status(200).send('OK');
   } catch (err) {
     console.error('Error parsing XML:', err);
     res.status(500).send('Internal Server Error');
   }
 };
 


 // subscribe to youtube notifications
 const crypto = require('crypto');
const YoutubeNotification = require('../db/YoutubeNotification');
const axios = require('axios');

const generateSecret = () => {
   return crypto.randomBytes(32).toString('hex');
};

const SubscribeYouTubeNotifications = async (userId, channelId, streamKey) => {
   try {
      const isAlready = await YoutubeNotification.findOne({ streamKey });
      if(isAlready){
         return {
            success: false,
            message: 'Channel is already subscribed.',
         };
      }
     else {
         const hubUrl = 'https://pubsubhubbub.appspot.com/subscribe';
         const topicUrl = `https://www.youtube.com/xml/feeds/videos.xml?channel_id=${channelId}`;
         // const callbackUrl = `https://serverrai.runstream.co/notification/youtube/callback/${streamKey}`;
         // const callbackUrl = `https://10be-2402-a00-1b1-1ae4-448f-6de0-bb9e-f09b.ngrok-free.app/notification/youtube/callback/${streamKey}`;
         const callbackUrl = `https://932d-122-180-247-198.ngrok-free.app/notification/youtube/callback/${streamKey}`;
         const secret = generateSecret();
   
         const response = await axios.post(hubUrl, null, {
            params: {
               'hub.mode': 'subscribe',
               'hub.topic': topicUrl,
               'hub.callback': callbackUrl,
               'hub.secret': secret,
               'hub.verify': 'async',
            },
         });
   
         console.log('Subscription response:', response.data);
         const subscription = new YoutubeNotification ({
            userId,
            channelId,
            callbackUrl,
            secret,
            streamKey
         });
         const saved = await subscription.save();
         if(!saved){
            return {
               success: false,
               message: 'Failed to subscribe youtube notifications.',
            };
         }
         return {
            success: true,
            subscription: subscription
         };
      }
      return
   } catch (err) {
      console.error(`Error subscribing to YouTube notifications for channel ${channelId}:`, err);
      return {
         success: false,
         message: `Error subscribing to YouTube notifications: ${err.message}`,
      };
   }
};

module.exports = SubscribeYouTubeNotifications;
